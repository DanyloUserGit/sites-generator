import Typography from '@/components/ui/Typography';
import { useAuth } from '@/hooks/AuthContext';
import { useAuthRedirect } from '@/hooks/useAuthRedirect';
import { baseUrl } from '@/utils';
import Head from 'next/head';
import { useRouter } from 'next/navigation';
import { useState } from 'react';
import File from '@/components/ui/File';
import Button from '@/components/ui/Button';
import BusinessForm from '@/components/ui/BusinessForm';

export default function RelumeCreate() {
  const router = useRouter();
  useAuthRedirect();

  const [city, setCity] = useState('');
  const [services, setServices] = useState('');
  const [domain, setDomain] = useState('');
  const [language, setLanguage] = useState<string | null>(null);

  const [file, setFile] = useState<File | null>(null);
  const token = useAuth();
  const handleCreateFromFile = async () => {
    if (!file) {
      return;
    }

    const formData = new FormData();
    formData.append('file', file);
    formData.append('city', city);
    formData.append('services', services);
    formData.append('domain', domain);
    if (language) {
      formData.append('language', language);
    }
    try {
      const response = await fetch(`${baseUrl}/api/generate-from-relume`, {
        method: 'POST',
        body: formData,
        headers: { Authorization: `Bearer ${token.token}` },
      });

      if (!response.ok) {
        return;
      }
      const data = await response.json();
      router.push(`/relume-generate-seo?siteId=${data.id}`);
    } catch (error) {
      console.error('Request failed:', error);
    }
  };

  return (
    <>
      <Head>
        <title>CleverSolution Admin | Create site (relume)</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className="bg-neutral-900 min-h-screen py-8 px-16 flex flex-col gap-7">
        <Typography variant="title">
          Fill in all the fields and upload the HTML .zip file
        </Typography>
        <BusinessForm
          city={city}
          language={language}
          services={services}
          domain={domain}
          setCity={setCity}
          setDomain={setDomain}
          setLanguage={setLanguage}
          setServices={setServices}
          showButtons={false}
        />
        <div className="flex flex-col items-center gap-[16px]">
          <File
            format=".zip"
            text="Upload .zip file"
            fileRef={file}
            onFileChange={(selectedFile) => setFile(selectedFile)}
          />
          <div className="flex w-full gap-[8px]">
            {' '}
            <Button
              className="flex-1"
              onClick={() => {
                router.back();
              }}
            >
              Back
            </Button>
            <Button
              className="flex-1"
              variant="action"
              onClick={handleCreateFromFile}
            >
              Create
            </Button>
          </div>
        </div>
      </div>
    </>
  );
}
